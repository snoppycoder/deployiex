// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { activityLogControllerCreate, activityLogControllerDelete, activityLogControllerFindAll, activityLogControllerFindAllCursor, activityLogControllerFindOne, approvalControllerCreate, approvalControllerFindAll, approvalControllerFindOne, approvalControllerRemove, approvalControllerUpdate, approvalWorkflowControllerCreate, approvalWorkflowControllerFindAll, approvalWorkflowControllerFindOne, approvalWorkflowControllerRemove, approvalWorkflowControllerUpdate, authControllerAdminUpdateUser, authControllerRegister, categoryControllerCreate, categoryControllerFindAll, categoryControllerFindAllByOrganization, categoryControllerFindOne, categoryControllerRemove, categoryControllerUpdate, expenseControllerCreate, expenseControllerFindAll, expenseControllerFindByUser, expenseControllerFindOne, expenseControllerGetExpenseInfo, expenseControllerRemove, expenseControllerSubmit, expenseControllerUpdate, expensePolicyControllerCreate, expensePolicyControllerFindAll, expensePolicyControllerFindOne, expensePolicyControllerRemove, expensePolicyControllerUpdate, healthControllerCheck, invitationControllerCreate, invitationControllerFindAll, invitationControllerFindOne, invitationControllerRemove, type Options, organizationControllerCreateOrganization, organizationControllerDeleteOrganization, organizationControllerFindAllOrganizations, organizationControllerFindAllOrganizationsCursor, organizationControllerFindOrganization, organizationControllerUpdateOrganization, organizationControllerUpdateOrganizationStatus, prometheusControllerIndex, roleControllerCreate, roleControllerFindAll, roleControllerFindByOrganization, roleControllerFindOne, roleControllerRemove, roleControllerUpdate, teamControllerCreate, teamControllerFindAll, teamControllerFindByOrganization, teamControllerFindOne, teamControllerRemove, userControllerDeleteUser, userControllerFindAllUsers, userControllerFindAllUsersCursor, userControllerFindAllUsersWithRelations, userControllerFindUser, userControllerGetCurrentUser, userControllerUpdateUserProfile, userTeamRoleControllerAssign, userTeamRoleControllerByTeam, userTeamRoleControllerByUser, userTeamRoleControllerRemove, userTeamRoleControllerSetStatus, userTeamRoleControllerUpdate } from '../sdk.gen';
import type { ActivityLogControllerCreateData, ActivityLogControllerCreateError, ActivityLogControllerCreateResponse, ActivityLogControllerDeleteData, ActivityLogControllerDeleteError, ActivityLogControllerFindAllCursorData, ActivityLogControllerFindAllData, ActivityLogControllerFindAllError, ActivityLogControllerFindAllResponse, ActivityLogControllerFindOneData, ApprovalControllerCreateData, ApprovalControllerFindAllData, ApprovalControllerFindOneData, ApprovalControllerRemoveData, ApprovalControllerUpdateData, ApprovalWorkflowControllerCreateData, ApprovalWorkflowControllerFindAllData, ApprovalWorkflowControllerFindOneData, ApprovalWorkflowControllerRemoveData, ApprovalWorkflowControllerUpdateData, AuthControllerAdminUpdateUserData, AuthControllerAdminUpdateUserError, AuthControllerRegisterData, AuthControllerRegisterError, CategoryControllerCreateData, CategoryControllerCreateError, CategoryControllerCreateResponse, CategoryControllerFindAllByOrganizationData, CategoryControllerFindAllData, CategoryControllerFindOneData, CategoryControllerRemoveData, CategoryControllerRemoveError, CategoryControllerUpdateData, CategoryControllerUpdateError, CategoryControllerUpdateResponse, ExpenseControllerCreateData, ExpenseControllerFindAllData, ExpenseControllerFindByUserData, ExpenseControllerFindOneData, ExpenseControllerGetExpenseInfoData, ExpenseControllerRemoveData, ExpenseControllerSubmitData, ExpenseControllerUpdateData, ExpensePolicyControllerCreateData, ExpensePolicyControllerFindAllData, ExpensePolicyControllerFindOneData, ExpensePolicyControllerRemoveData, ExpensePolicyControllerUpdateData, HealthControllerCheckData, InvitationControllerCreateData, InvitationControllerCreateError, InvitationControllerCreateResponse, InvitationControllerFindAllData, InvitationControllerFindOneData, InvitationControllerRemoveData, InvitationControllerRemoveError, OrganizationControllerCreateOrganizationData, OrganizationControllerCreateOrganizationError, OrganizationControllerCreateOrganizationResponse, OrganizationControllerDeleteOrganizationData, OrganizationControllerDeleteOrganizationError, OrganizationControllerFindAllOrganizationsCursorData, OrganizationControllerFindAllOrganizationsData, OrganizationControllerFindAllOrganizationsError, OrganizationControllerFindAllOrganizationsResponse, OrganizationControllerFindOrganizationData, OrganizationControllerUpdateOrganizationData, OrganizationControllerUpdateOrganizationError, OrganizationControllerUpdateOrganizationResponse, OrganizationControllerUpdateOrganizationStatusData, OrganizationControllerUpdateOrganizationStatusError, OrganizationControllerUpdateOrganizationStatusResponse, PrometheusControllerIndexData, RoleControllerCreateData, RoleControllerCreateError, RoleControllerCreateResponse, RoleControllerFindAllData, RoleControllerFindByOrganizationData, RoleControllerFindByOrganizationError, RoleControllerFindByOrganizationResponse, RoleControllerFindOneData, RoleControllerRemoveData, RoleControllerRemoveError, RoleControllerUpdateData, RoleControllerUpdateError, RoleControllerUpdateResponse, TeamControllerCreateData, TeamControllerCreateError, TeamControllerCreateResponse, TeamControllerFindAllData, TeamControllerFindByOrganizationData, TeamControllerFindByOrganizationError, TeamControllerFindByOrganizationResponse, TeamControllerFindOneData, TeamControllerRemoveData, TeamControllerRemoveError, UserControllerDeleteUserData, UserControllerDeleteUserError, UserControllerFindAllUsersCursorData, UserControllerFindAllUsersData, UserControllerFindAllUsersError, UserControllerFindAllUsersResponse, UserControllerFindAllUsersWithRelationsData, UserControllerFindAllUsersWithRelationsError, UserControllerFindAllUsersWithRelationsResponse, UserControllerFindUserData, UserControllerGetCurrentUserData, UserControllerUpdateUserProfileData, UserControllerUpdateUserProfileError, UserControllerUpdateUserProfileResponse, UserTeamRoleControllerAssignData, UserTeamRoleControllerByTeamData, UserTeamRoleControllerByUserData, UserTeamRoleControllerRemoveData, UserTeamRoleControllerSetStatusData, UserTeamRoleControllerUpdateData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const prometheusControllerIndexQueryKey = (options?: Options<PrometheusControllerIndexData>) => createQueryKey('prometheusControllerIndex', options);

export const prometheusControllerIndexOptions = (options?: Options<PrometheusControllerIndexData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await prometheusControllerIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: prometheusControllerIndexQueryKey(options)
    });
};

/**
 * Register a new user
 */
export const authControllerRegisterMutation = (options?: Partial<Options<AuthControllerRegisterData>>): UseMutationOptions<unknown, AuthControllerRegisterError, Options<AuthControllerRegisterData>> => {
    const mutationOptions: UseMutationOptions<unknown, AuthControllerRegisterError, Options<AuthControllerRegisterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await authControllerRegister({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Admin: Update a user
 */
export const authControllerAdminUpdateUserMutation = (options?: Partial<Options<AuthControllerAdminUpdateUserData>>): UseMutationOptions<unknown, AuthControllerAdminUpdateUserError, Options<AuthControllerAdminUpdateUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, AuthControllerAdminUpdateUserError, Options<AuthControllerAdminUpdateUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await authControllerAdminUpdateUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const healthControllerCheckQueryKey = (options?: Options<HealthControllerCheckData>) => createQueryKey('healthControllerCheck', options);

/**
 * Health check
 */
export const healthControllerCheckOptions = (options?: Options<HealthControllerCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthControllerCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthControllerCheckQueryKey(options)
    });
};

export const userControllerGetCurrentUserQueryKey = (options?: Options<UserControllerGetCurrentUserData>) => createQueryKey('userControllerGetCurrentUser', options);

/**
 * Get current user including team roles (team id/name, role id/name) and team organization (id/name)
 */
export const userControllerGetCurrentUserOptions = (options?: Options<UserControllerGetCurrentUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerGetCurrentUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerGetCurrentUserQueryKey(options)
    });
};

export const userControllerFindAllUsersQueryKey = (options?: Options<UserControllerFindAllUsersData>) => createQueryKey('userControllerFindAllUsers', options);

/**
 * List users.
 */
export const userControllerFindAllUsersOptions = (options?: Options<UserControllerFindAllUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerFindAllUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerFindAllUsersQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const userControllerFindAllUsersInfiniteQueryKey = (options?: Options<UserControllerFindAllUsersData>): QueryKey<Options<UserControllerFindAllUsersData>> => createQueryKey('userControllerFindAllUsers', options, true);

/**
 * List users.
 */
export const userControllerFindAllUsersInfiniteOptions = (options?: Options<UserControllerFindAllUsersData>) => {
    return infiniteQueryOptions<UserControllerFindAllUsersResponse, UserControllerFindAllUsersError, InfiniteData<UserControllerFindAllUsersResponse>, QueryKey<Options<UserControllerFindAllUsersData>>, number | Pick<QueryKey<Options<UserControllerFindAllUsersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<UserControllerFindAllUsersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await userControllerFindAllUsers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerFindAllUsersInfiniteQueryKey(options)
    });
};

export const userControllerFindAllUsersCursorQueryKey = (options?: Options<UserControllerFindAllUsersCursorData>) => createQueryKey('userControllerFindAllUsersCursor', options);

/**
 * List users via cursor.
 */
export const userControllerFindAllUsersCursorOptions = (options?: Options<UserControllerFindAllUsersCursorData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerFindAllUsersCursor({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerFindAllUsersCursorQueryKey(options)
    });
};

export const userControllerFindAllUsersWithRelationsQueryKey = (options?: Options<UserControllerFindAllUsersWithRelationsData>) => createQueryKey('userControllerFindAllUsersWithRelations', options);

/**
 * List users including userTeamRoles, team, role, and organization
 */
export const userControllerFindAllUsersWithRelationsOptions = (options?: Options<UserControllerFindAllUsersWithRelationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerFindAllUsersWithRelations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerFindAllUsersWithRelationsQueryKey(options)
    });
};

export const userControllerFindAllUsersWithRelationsInfiniteQueryKey = (options?: Options<UserControllerFindAllUsersWithRelationsData>): QueryKey<Options<UserControllerFindAllUsersWithRelationsData>> => createQueryKey('userControllerFindAllUsersWithRelations', options, true);

/**
 * List users including userTeamRoles, team, role, and organization
 */
export const userControllerFindAllUsersWithRelationsInfiniteOptions = (options?: Options<UserControllerFindAllUsersWithRelationsData>) => {
    return infiniteQueryOptions<UserControllerFindAllUsersWithRelationsResponse, UserControllerFindAllUsersWithRelationsError, InfiniteData<UserControllerFindAllUsersWithRelationsResponse>, QueryKey<Options<UserControllerFindAllUsersWithRelationsData>>, number | Pick<QueryKey<Options<UserControllerFindAllUsersWithRelationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<UserControllerFindAllUsersWithRelationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await userControllerFindAllUsersWithRelations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerFindAllUsersWithRelationsInfiniteQueryKey(options)
    });
};

/**
 * Delete a user
 */
export const userControllerDeleteUserMutation = (options?: Partial<Options<UserControllerDeleteUserData>>): UseMutationOptions<unknown, UserControllerDeleteUserError, Options<UserControllerDeleteUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, UserControllerDeleteUserError, Options<UserControllerDeleteUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userControllerDeleteUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userControllerFindUserQueryKey = (options: Options<UserControllerFindUserData>) => createQueryKey('userControllerFindUser', options);

/**
 * Find user by id
 */
export const userControllerFindUserOptions = (options: Options<UserControllerFindUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerFindUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerFindUserQueryKey(options)
    });
};

/**
 * Update user's profile
 */
export const userControllerUpdateUserProfileMutation = (options?: Partial<Options<UserControllerUpdateUserProfileData>>): UseMutationOptions<UserControllerUpdateUserProfileResponse, UserControllerUpdateUserProfileError, Options<UserControllerUpdateUserProfileData>> => {
    const mutationOptions: UseMutationOptions<UserControllerUpdateUserProfileResponse, UserControllerUpdateUserProfileError, Options<UserControllerUpdateUserProfileData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userControllerUpdateUserProfile({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const teamControllerFindAllQueryKey = (options?: Options<TeamControllerFindAllData>) => createQueryKey('teamControllerFindAll', options);

/**
 * List teams
 */
export const teamControllerFindAllOptions = (options?: Options<TeamControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await teamControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: teamControllerFindAllQueryKey(options)
    });
};

/**
 * Create a team
 */
export const teamControllerCreateMutation = (options?: Partial<Options<TeamControllerCreateData>>): UseMutationOptions<TeamControllerCreateResponse, TeamControllerCreateError, Options<TeamControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<TeamControllerCreateResponse, TeamControllerCreateError, Options<TeamControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await teamControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete team
 */
export const teamControllerRemoveMutation = (options?: Partial<Options<TeamControllerRemoveData>>): UseMutationOptions<unknown, TeamControllerRemoveError, Options<TeamControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, TeamControllerRemoveError, Options<TeamControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await teamControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const teamControllerFindOneQueryKey = (options: Options<TeamControllerFindOneData>) => createQueryKey('teamControllerFindOne', options);

/**
 * Get team by id
 */
export const teamControllerFindOneOptions = (options: Options<TeamControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await teamControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: teamControllerFindOneQueryKey(options)
    });
};

export const teamControllerFindByOrganizationQueryKey = (options: Options<TeamControllerFindByOrganizationData>) => createQueryKey('teamControllerFindByOrganization', options);

/**
 * List teams by organization id
 */
export const teamControllerFindByOrganizationOptions = (options: Options<TeamControllerFindByOrganizationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await teamControllerFindByOrganization({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: teamControllerFindByOrganizationQueryKey(options)
    });
};

export const teamControllerFindByOrganizationInfiniteQueryKey = (options: Options<TeamControllerFindByOrganizationData>): QueryKey<Options<TeamControllerFindByOrganizationData>> => createQueryKey('teamControllerFindByOrganization', options, true);

/**
 * List teams by organization id
 */
export const teamControllerFindByOrganizationInfiniteOptions = (options: Options<TeamControllerFindByOrganizationData>) => {
    return infiniteQueryOptions<TeamControllerFindByOrganizationResponse, TeamControllerFindByOrganizationError, InfiniteData<TeamControllerFindByOrganizationResponse>, QueryKey<Options<TeamControllerFindByOrganizationData>>, number | Pick<QueryKey<Options<TeamControllerFindByOrganizationData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<TeamControllerFindByOrganizationData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await teamControllerFindByOrganization({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: teamControllerFindByOrganizationInfiniteQueryKey(options)
    });
};

export const invitationControllerFindAllQueryKey = (options?: Options<InvitationControllerFindAllData>) => createQueryKey('invitationControllerFindAll', options);

/**
 * List invitations
 */
export const invitationControllerFindAllOptions = (options?: Options<InvitationControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await invitationControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: invitationControllerFindAllQueryKey(options)
    });
};

/**
 * Create a team invitation
 */
export const invitationControllerCreateMutation = (options?: Partial<Options<InvitationControllerCreateData>>): UseMutationOptions<InvitationControllerCreateResponse, InvitationControllerCreateError, Options<InvitationControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<InvitationControllerCreateResponse, InvitationControllerCreateError, Options<InvitationControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await invitationControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete invitation
 */
export const invitationControllerRemoveMutation = (options?: Partial<Options<InvitationControllerRemoveData>>): UseMutationOptions<unknown, InvitationControllerRemoveError, Options<InvitationControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, InvitationControllerRemoveError, Options<InvitationControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await invitationControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const invitationControllerFindOneQueryKey = (options: Options<InvitationControllerFindOneData>) => createQueryKey('invitationControllerFindOne', options);

/**
 * Get invitation by id
 */
export const invitationControllerFindOneOptions = (options: Options<InvitationControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await invitationControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: invitationControllerFindOneQueryKey(options)
    });
};

export const userTeamRoleControllerAssignMutation = (options?: Partial<Options<UserTeamRoleControllerAssignData>>): UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerAssignData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerAssignData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userTeamRoleControllerAssign({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userTeamRoleControllerByTeamQueryKey = (options: Options<UserTeamRoleControllerByTeamData>) => createQueryKey('userTeamRoleControllerByTeam', options);

export const userTeamRoleControllerByTeamOptions = (options: Options<UserTeamRoleControllerByTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userTeamRoleControllerByTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userTeamRoleControllerByTeamQueryKey(options)
    });
};

export const userTeamRoleControllerByUserQueryKey = (options: Options<UserTeamRoleControllerByUserData>) => createQueryKey('userTeamRoleControllerByUser', options);

export const userTeamRoleControllerByUserOptions = (options: Options<UserTeamRoleControllerByUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userTeamRoleControllerByUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userTeamRoleControllerByUserQueryKey(options)
    });
};

export const userTeamRoleControllerRemoveMutation = (options?: Partial<Options<UserTeamRoleControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userTeamRoleControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userTeamRoleControllerUpdateMutation = (options?: Partial<Options<UserTeamRoleControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userTeamRoleControllerUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userTeamRoleControllerSetStatusMutation = (options?: Partial<Options<UserTeamRoleControllerSetStatusData>>): UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerSetStatusData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UserTeamRoleControllerSetStatusData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await userTeamRoleControllerSetStatus({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const roleControllerFindAllQueryKey = (options?: Options<RoleControllerFindAllData>) => createQueryKey('roleControllerFindAll', options);

/**
 * List roles
 */
export const roleControllerFindAllOptions = (options?: Options<RoleControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await roleControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleControllerFindAllQueryKey(options)
    });
};

/**
 * Create a role
 */
export const roleControllerCreateMutation = (options?: Partial<Options<RoleControllerCreateData>>): UseMutationOptions<RoleControllerCreateResponse, RoleControllerCreateError, Options<RoleControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<RoleControllerCreateResponse, RoleControllerCreateError, Options<RoleControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await roleControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete role
 */
export const roleControllerRemoveMutation = (options?: Partial<Options<RoleControllerRemoveData>>): UseMutationOptions<unknown, RoleControllerRemoveError, Options<RoleControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, RoleControllerRemoveError, Options<RoleControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await roleControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const roleControllerFindOneQueryKey = (options: Options<RoleControllerFindOneData>) => createQueryKey('roleControllerFindOne', options);

/**
 * Get role by id
 */
export const roleControllerFindOneOptions = (options: Options<RoleControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await roleControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleControllerFindOneQueryKey(options)
    });
};

/**
 * Update role
 */
export const roleControllerUpdateMutation = (options?: Partial<Options<RoleControllerUpdateData>>): UseMutationOptions<RoleControllerUpdateResponse, RoleControllerUpdateError, Options<RoleControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<RoleControllerUpdateResponse, RoleControllerUpdateError, Options<RoleControllerUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await roleControllerUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const roleControllerFindByOrganizationQueryKey = (options: Options<RoleControllerFindByOrganizationData>) => createQueryKey('roleControllerFindByOrganization', options);

/**
 * List roles by organization id
 */
export const roleControllerFindByOrganizationOptions = (options: Options<RoleControllerFindByOrganizationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await roleControllerFindByOrganization({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleControllerFindByOrganizationQueryKey(options)
    });
};

export const roleControllerFindByOrganizationInfiniteQueryKey = (options: Options<RoleControllerFindByOrganizationData>): QueryKey<Options<RoleControllerFindByOrganizationData>> => createQueryKey('roleControllerFindByOrganization', options, true);

/**
 * List roles by organization id
 */
export const roleControllerFindByOrganizationInfiniteOptions = (options: Options<RoleControllerFindByOrganizationData>) => {
    return infiniteQueryOptions<RoleControllerFindByOrganizationResponse, RoleControllerFindByOrganizationError, InfiniteData<RoleControllerFindByOrganizationResponse>, QueryKey<Options<RoleControllerFindByOrganizationData>>, number | Pick<QueryKey<Options<RoleControllerFindByOrganizationData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<RoleControllerFindByOrganizationData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await roleControllerFindByOrganization({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleControllerFindByOrganizationInfiniteQueryKey(options)
    });
};

export const categoryControllerFindAllQueryKey = (options?: Options<CategoryControllerFindAllData>) => createQueryKey('categoryControllerFindAll', options);

/**
 * List categories
 */
export const categoryControllerFindAllOptions = (options?: Options<CategoryControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await categoryControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: categoryControllerFindAllQueryKey(options)
    });
};

/**
 * Create category
 */
export const categoryControllerCreateMutation = (options?: Partial<Options<CategoryControllerCreateData>>): UseMutationOptions<CategoryControllerCreateResponse, CategoryControllerCreateError, Options<CategoryControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<CategoryControllerCreateResponse, CategoryControllerCreateError, Options<CategoryControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await categoryControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const categoryControllerFindAllByOrganizationQueryKey = (options: Options<CategoryControllerFindAllByOrganizationData>) => createQueryKey('categoryControllerFindAllByOrganization', options);

/**
 * Get all category of an organization
 */
export const categoryControllerFindAllByOrganizationOptions = (options: Options<CategoryControllerFindAllByOrganizationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await categoryControllerFindAllByOrganization({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: categoryControllerFindAllByOrganizationQueryKey(options)
    });
};

/**
 * Delete category
 */
export const categoryControllerRemoveMutation = (options?: Partial<Options<CategoryControllerRemoveData>>): UseMutationOptions<unknown, CategoryControllerRemoveError, Options<CategoryControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, CategoryControllerRemoveError, Options<CategoryControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await categoryControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const categoryControllerFindOneQueryKey = (options: Options<CategoryControllerFindOneData>) => createQueryKey('categoryControllerFindOne', options);

/**
 * Get category by id
 */
export const categoryControllerFindOneOptions = (options: Options<CategoryControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await categoryControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: categoryControllerFindOneQueryKey(options)
    });
};

/**
 * Update category
 */
export const categoryControllerUpdateMutation = (options?: Partial<Options<CategoryControllerUpdateData>>): UseMutationOptions<CategoryControllerUpdateResponse, CategoryControllerUpdateError, Options<CategoryControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<CategoryControllerUpdateResponse, CategoryControllerUpdateError, Options<CategoryControllerUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await categoryControllerUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const expenseControllerFindAllQueryKey = (options?: Options<ExpenseControllerFindAllData>) => createQueryKey('expenseControllerFindAll', options);

export const expenseControllerFindAllOptions = (options?: Options<ExpenseControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await expenseControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: expenseControllerFindAllQueryKey(options)
    });
};

export const expenseControllerCreateMutation = (options?: Partial<Options<ExpenseControllerCreateData>>): UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await expenseControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const expenseControllerGetExpenseInfoQueryKey = (options: Options<ExpenseControllerGetExpenseInfoData>) => createQueryKey('expenseControllerGetExpenseInfo', options);

export const expenseControllerGetExpenseInfoOptions = (options: Options<ExpenseControllerGetExpenseInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await expenseControllerGetExpenseInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: expenseControllerGetExpenseInfoQueryKey(options)
    });
};

export const expenseControllerFindByUserQueryKey = (options: Options<ExpenseControllerFindByUserData>) => createQueryKey('expenseControllerFindByUser', options);

export const expenseControllerFindByUserOptions = (options: Options<ExpenseControllerFindByUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await expenseControllerFindByUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: expenseControllerFindByUserQueryKey(options)
    });
};

export const expenseControllerRemoveMutation = (options?: Partial<Options<ExpenseControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await expenseControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const expenseControllerFindOneQueryKey = (options: Options<ExpenseControllerFindOneData>) => createQueryKey('expenseControllerFindOne', options);

export const expenseControllerFindOneOptions = (options: Options<ExpenseControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await expenseControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: expenseControllerFindOneQueryKey(options)
    });
};

export const expenseControllerUpdateMutation = (options?: Partial<Options<ExpenseControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await expenseControllerUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const expenseControllerSubmitMutation = (options?: Partial<Options<ExpenseControllerSubmitData>>): UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerSubmitData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ExpenseControllerSubmitData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await expenseControllerSubmit({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const approvalWorkflowControllerFindAllQueryKey = (options?: Options<ApprovalWorkflowControllerFindAllData>) => createQueryKey('approvalWorkflowControllerFindAll', options);

export const approvalWorkflowControllerFindAllOptions = (options?: Options<ApprovalWorkflowControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await approvalWorkflowControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: approvalWorkflowControllerFindAllQueryKey(options)
    });
};

export const approvalWorkflowControllerCreateMutation = (options?: Partial<Options<ApprovalWorkflowControllerCreateData>>): UseMutationOptions<unknown, DefaultError, Options<ApprovalWorkflowControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ApprovalWorkflowControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await approvalWorkflowControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const approvalWorkflowControllerRemoveMutation = (options?: Partial<Options<ApprovalWorkflowControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<ApprovalWorkflowControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ApprovalWorkflowControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await approvalWorkflowControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const approvalWorkflowControllerFindOneQueryKey = (options: Options<ApprovalWorkflowControllerFindOneData>) => createQueryKey('approvalWorkflowControllerFindOne', options);

export const approvalWorkflowControllerFindOneOptions = (options: Options<ApprovalWorkflowControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await approvalWorkflowControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: approvalWorkflowControllerFindOneQueryKey(options)
    });
};

export const approvalWorkflowControllerUpdateMutation = (options?: Partial<Options<ApprovalWorkflowControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<ApprovalWorkflowControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ApprovalWorkflowControllerUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await approvalWorkflowControllerUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create a new organization
 */
export const organizationControllerCreateOrganizationMutation = (options?: Partial<Options<OrganizationControllerCreateOrganizationData>>): UseMutationOptions<OrganizationControllerCreateOrganizationResponse, OrganizationControllerCreateOrganizationError, Options<OrganizationControllerCreateOrganizationData>> => {
    const mutationOptions: UseMutationOptions<OrganizationControllerCreateOrganizationResponse, OrganizationControllerCreateOrganizationError, Options<OrganizationControllerCreateOrganizationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await organizationControllerCreateOrganization({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerFindAllOrganizationsQueryKey = (options?: Options<OrganizationControllerFindAllOrganizationsData>) => createQueryKey('organizationControllerFindAllOrganizations', options);

/**
 * List organizations
 */
export const organizationControllerFindAllOrganizationsOptions = (options?: Options<OrganizationControllerFindAllOrganizationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await organizationControllerFindAllOrganizations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerFindAllOrganizationsQueryKey(options)
    });
};

export const organizationControllerFindAllOrganizationsInfiniteQueryKey = (options?: Options<OrganizationControllerFindAllOrganizationsData>): QueryKey<Options<OrganizationControllerFindAllOrganizationsData>> => createQueryKey('organizationControllerFindAllOrganizations', options, true);

/**
 * List organizations
 */
export const organizationControllerFindAllOrganizationsInfiniteOptions = (options?: Options<OrganizationControllerFindAllOrganizationsData>) => {
    return infiniteQueryOptions<OrganizationControllerFindAllOrganizationsResponse, OrganizationControllerFindAllOrganizationsError, InfiniteData<OrganizationControllerFindAllOrganizationsResponse>, QueryKey<Options<OrganizationControllerFindAllOrganizationsData>>, number | Pick<QueryKey<Options<OrganizationControllerFindAllOrganizationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<OrganizationControllerFindAllOrganizationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await organizationControllerFindAllOrganizations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerFindAllOrganizationsInfiniteQueryKey(options)
    });
};

export const organizationControllerFindAllOrganizationsCursorQueryKey = (options?: Options<OrganizationControllerFindAllOrganizationsCursorData>) => createQueryKey('organizationControllerFindAllOrganizationsCursor', options);

/**
 * List organizations via cursor
 */
export const organizationControllerFindAllOrganizationsCursorOptions = (options?: Options<OrganizationControllerFindAllOrganizationsCursorData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await organizationControllerFindAllOrganizationsCursor({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerFindAllOrganizationsCursorQueryKey(options)
    });
};

/**
 * Delete an organization
 */
export const organizationControllerDeleteOrganizationMutation = (options?: Partial<Options<OrganizationControllerDeleteOrganizationData>>): UseMutationOptions<unknown, OrganizationControllerDeleteOrganizationError, Options<OrganizationControllerDeleteOrganizationData>> => {
    const mutationOptions: UseMutationOptions<unknown, OrganizationControllerDeleteOrganizationError, Options<OrganizationControllerDeleteOrganizationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await organizationControllerDeleteOrganization({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerFindOrganizationQueryKey = (options: Options<OrganizationControllerFindOrganizationData>) => createQueryKey('organizationControllerFindOrganization', options);

/**
 * Find organization by id
 */
export const organizationControllerFindOrganizationOptions = (options: Options<OrganizationControllerFindOrganizationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await organizationControllerFindOrganization({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerFindOrganizationQueryKey(options)
    });
};

/**
 * Update organization
 */
export const organizationControllerUpdateOrganizationMutation = (options?: Partial<Options<OrganizationControllerUpdateOrganizationData>>): UseMutationOptions<OrganizationControllerUpdateOrganizationResponse, OrganizationControllerUpdateOrganizationError, Options<OrganizationControllerUpdateOrganizationData>> => {
    const mutationOptions: UseMutationOptions<OrganizationControllerUpdateOrganizationResponse, OrganizationControllerUpdateOrganizationError, Options<OrganizationControllerUpdateOrganizationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await organizationControllerUpdateOrganization({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update organization active status
 */
export const organizationControllerUpdateOrganizationStatusMutation = (options?: Partial<Options<OrganizationControllerUpdateOrganizationStatusData>>): UseMutationOptions<OrganizationControllerUpdateOrganizationStatusResponse, OrganizationControllerUpdateOrganizationStatusError, Options<OrganizationControllerUpdateOrganizationStatusData>> => {
    const mutationOptions: UseMutationOptions<OrganizationControllerUpdateOrganizationStatusResponse, OrganizationControllerUpdateOrganizationStatusError, Options<OrganizationControllerUpdateOrganizationStatusData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await organizationControllerUpdateOrganizationStatus({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const expensePolicyControllerFindAllQueryKey = (options?: Options<ExpensePolicyControllerFindAllData>) => createQueryKey('expensePolicyControllerFindAll', options);

export const expensePolicyControllerFindAllOptions = (options?: Options<ExpensePolicyControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await expensePolicyControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: expensePolicyControllerFindAllQueryKey(options)
    });
};

export const expensePolicyControllerCreateMutation = (options?: Partial<Options<ExpensePolicyControllerCreateData>>): UseMutationOptions<unknown, DefaultError, Options<ExpensePolicyControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ExpensePolicyControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await expensePolicyControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const expensePolicyControllerRemoveMutation = (options?: Partial<Options<ExpensePolicyControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<ExpensePolicyControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ExpensePolicyControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await expensePolicyControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const expensePolicyControllerFindOneQueryKey = (options: Options<ExpensePolicyControllerFindOneData>) => createQueryKey('expensePolicyControllerFindOne', options);

export const expensePolicyControllerFindOneOptions = (options: Options<ExpensePolicyControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await expensePolicyControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: expensePolicyControllerFindOneQueryKey(options)
    });
};

export const expensePolicyControllerUpdateMutation = (options?: Partial<Options<ExpensePolicyControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<ExpensePolicyControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ExpensePolicyControllerUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await expensePolicyControllerUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const activityLogControllerFindAllQueryKey = (options?: Options<ActivityLogControllerFindAllData>) => createQueryKey('activityLogControllerFindAll', options);

/**
 * List activity logs
 */
export const activityLogControllerFindAllOptions = (options?: Options<ActivityLogControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await activityLogControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogControllerFindAllQueryKey(options)
    });
};

export const activityLogControllerFindAllInfiniteQueryKey = (options?: Options<ActivityLogControllerFindAllData>): QueryKey<Options<ActivityLogControllerFindAllData>> => createQueryKey('activityLogControllerFindAll', options, true);

/**
 * List activity logs
 */
export const activityLogControllerFindAllInfiniteOptions = (options?: Options<ActivityLogControllerFindAllData>) => {
    return infiniteQueryOptions<ActivityLogControllerFindAllResponse, ActivityLogControllerFindAllError, InfiniteData<ActivityLogControllerFindAllResponse>, QueryKey<Options<ActivityLogControllerFindAllData>>, number | Pick<QueryKey<Options<ActivityLogControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ActivityLogControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await activityLogControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogControllerFindAllInfiniteQueryKey(options)
    });
};

/**
 * Create activity log
 */
export const activityLogControllerCreateMutation = (options?: Partial<Options<ActivityLogControllerCreateData>>): UseMutationOptions<ActivityLogControllerCreateResponse, ActivityLogControllerCreateError, Options<ActivityLogControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<ActivityLogControllerCreateResponse, ActivityLogControllerCreateError, Options<ActivityLogControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await activityLogControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const activityLogControllerFindAllCursorQueryKey = (options?: Options<ActivityLogControllerFindAllCursorData>) => createQueryKey('activityLogControllerFindAllCursor', options);

/**
 * List activity logs via cursor
 */
export const activityLogControllerFindAllCursorOptions = (options?: Options<ActivityLogControllerFindAllCursorData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await activityLogControllerFindAllCursor({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogControllerFindAllCursorQueryKey(options)
    });
};

/**
 * Delete an activity log
 */
export const activityLogControllerDeleteMutation = (options?: Partial<Options<ActivityLogControllerDeleteData>>): UseMutationOptions<unknown, ActivityLogControllerDeleteError, Options<ActivityLogControllerDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, ActivityLogControllerDeleteError, Options<ActivityLogControllerDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await activityLogControllerDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const activityLogControllerFindOneQueryKey = (options: Options<ActivityLogControllerFindOneData>) => createQueryKey('activityLogControllerFindOne', options);

/**
 * Find activity log by id
 */
export const activityLogControllerFindOneOptions = (options: Options<ActivityLogControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await activityLogControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogControllerFindOneQueryKey(options)
    });
};

export const approvalControllerFindAllQueryKey = (options?: Options<ApprovalControllerFindAllData>) => createQueryKey('approvalControllerFindAll', options);

export const approvalControllerFindAllOptions = (options?: Options<ApprovalControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await approvalControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: approvalControllerFindAllQueryKey(options)
    });
};

export const approvalControllerCreateMutation = (options?: Partial<Options<ApprovalControllerCreateData>>): UseMutationOptions<unknown, DefaultError, Options<ApprovalControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ApprovalControllerCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await approvalControllerCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const approvalControllerRemoveMutation = (options?: Partial<Options<ApprovalControllerRemoveData>>): UseMutationOptions<unknown, DefaultError, Options<ApprovalControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ApprovalControllerRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await approvalControllerRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const approvalControllerFindOneQueryKey = (options: Options<ApprovalControllerFindOneData>) => createQueryKey('approvalControllerFindOne', options);

export const approvalControllerFindOneOptions = (options: Options<ApprovalControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await approvalControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: approvalControllerFindOneQueryKey(options)
    });
};

export const approvalControllerUpdateMutation = (options?: Partial<Options<ApprovalControllerUpdateData>>): UseMutationOptions<unknown, DefaultError, Options<ApprovalControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ApprovalControllerUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await approvalControllerUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
