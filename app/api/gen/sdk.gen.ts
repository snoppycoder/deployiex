// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ActivityLogControllerCreateData, ActivityLogControllerCreateErrors, ActivityLogControllerCreateResponses, ActivityLogControllerDeleteData, ActivityLogControllerDeleteErrors, ActivityLogControllerDeleteResponses, ActivityLogControllerFindAllCursorData, ActivityLogControllerFindAllCursorErrors, ActivityLogControllerFindAllCursorResponses, ActivityLogControllerFindAllData, ActivityLogControllerFindAllErrors, ActivityLogControllerFindAllResponses, ActivityLogControllerFindOneData, ActivityLogControllerFindOneErrors, ActivityLogControllerFindOneResponses, ApprovalControllerCreateData, ApprovalControllerCreateResponses, ApprovalControllerFindAllData, ApprovalControllerFindAllResponses, ApprovalControllerFindOneData, ApprovalControllerFindOneResponses, ApprovalControllerRemoveData, ApprovalControllerRemoveResponses, ApprovalControllerUpdateData, ApprovalControllerUpdateResponses, ApprovalWorkflowControllerCreateData, ApprovalWorkflowControllerCreateResponses, ApprovalWorkflowControllerFindAllData, ApprovalWorkflowControllerFindAllResponses, ApprovalWorkflowControllerFindOneData, ApprovalWorkflowControllerFindOneResponses, ApprovalWorkflowControllerRemoveData, ApprovalWorkflowControllerRemoveResponses, ApprovalWorkflowControllerUpdateData, ApprovalWorkflowControllerUpdateResponses, AuthControllerAdminUpdateUserData, AuthControllerAdminUpdateUserErrors, AuthControllerAdminUpdateUserResponses, AuthControllerRegisterData, AuthControllerRegisterErrors, AuthControllerRegisterResponses, CategoryControllerCreateData, CategoryControllerCreateErrors, CategoryControllerCreateResponses, CategoryControllerFindAllByOrganizationData, CategoryControllerFindAllByOrganizationErrors, CategoryControllerFindAllByOrganizationResponses, CategoryControllerFindAllData, CategoryControllerFindAllErrors, CategoryControllerFindAllResponses, CategoryControllerFindOneData, CategoryControllerFindOneErrors, CategoryControllerFindOneResponses, CategoryControllerRemoveData, CategoryControllerRemoveErrors, CategoryControllerRemoveResponses, CategoryControllerUpdateData, CategoryControllerUpdateErrors, CategoryControllerUpdateResponses, ExpenseControllerCreateData, ExpenseControllerCreateResponses, ExpenseControllerFindAllData, ExpenseControllerFindAllResponses, ExpenseControllerFindByUserData, ExpenseControllerFindByUserResponses, ExpenseControllerFindOneData, ExpenseControllerFindOneResponses, ExpenseControllerGetExpenseInfoData, ExpenseControllerGetExpenseInfoResponses, ExpenseControllerRemoveData, ExpenseControllerRemoveResponses, ExpenseControllerSubmitData, ExpenseControllerSubmitResponses, ExpenseControllerUpdateData, ExpenseControllerUpdateResponses, ExpensePolicyControllerCreateData, ExpensePolicyControllerCreateResponses, ExpensePolicyControllerFindAllData, ExpensePolicyControllerFindAllResponses, ExpensePolicyControllerFindOneData, ExpensePolicyControllerFindOneResponses, ExpensePolicyControllerRemoveData, ExpensePolicyControllerRemoveResponses, ExpensePolicyControllerUpdateData, ExpensePolicyControllerUpdateResponses, HealthControllerCheckData, HealthControllerCheckErrors, HealthControllerCheckResponses, InvitationControllerCreateData, InvitationControllerCreateErrors, InvitationControllerCreateResponses, InvitationControllerFindAllData, InvitationControllerFindAllErrors, InvitationControllerFindAllResponses, InvitationControllerFindOneData, InvitationControllerFindOneErrors, InvitationControllerFindOneResponses, InvitationControllerRemoveData, InvitationControllerRemoveErrors, InvitationControllerRemoveResponses, OrganizationControllerCreateOrganizationData, OrganizationControllerCreateOrganizationErrors, OrganizationControllerCreateOrganizationResponses, OrganizationControllerDeleteOrganizationData, OrganizationControllerDeleteOrganizationErrors, OrganizationControllerDeleteOrganizationResponses, OrganizationControllerFindAllOrganizationsCursorData, OrganizationControllerFindAllOrganizationsCursorErrors, OrganizationControllerFindAllOrganizationsCursorResponses, OrganizationControllerFindAllOrganizationsData, OrganizationControllerFindAllOrganizationsErrors, OrganizationControllerFindAllOrganizationsResponses, OrganizationControllerFindOrganizationData, OrganizationControllerFindOrganizationErrors, OrganizationControllerFindOrganizationResponses, OrganizationControllerUpdateOrganizationData, OrganizationControllerUpdateOrganizationErrors, OrganizationControllerUpdateOrganizationResponses, OrganizationControllerUpdateOrganizationStatusData, OrganizationControllerUpdateOrganizationStatusErrors, OrganizationControllerUpdateOrganizationStatusResponses, PrometheusControllerIndexData, PrometheusControllerIndexResponses, RoleControllerCreateData, RoleControllerCreateErrors, RoleControllerCreateResponses, RoleControllerFindAllData, RoleControllerFindAllErrors, RoleControllerFindAllResponses, RoleControllerFindByOrganizationData, RoleControllerFindByOrganizationErrors, RoleControllerFindByOrganizationResponses, RoleControllerFindOneData, RoleControllerFindOneErrors, RoleControllerFindOneResponses, RoleControllerRemoveData, RoleControllerRemoveErrors, RoleControllerRemoveResponses, RoleControllerUpdateData, RoleControllerUpdateErrors, RoleControllerUpdateResponses, TeamControllerCreateData, TeamControllerCreateErrors, TeamControllerCreateResponses, TeamControllerFindAllData, TeamControllerFindAllErrors, TeamControllerFindAllResponses, TeamControllerFindByOrganizationData, TeamControllerFindByOrganizationErrors, TeamControllerFindByOrganizationResponses, TeamControllerFindOneData, TeamControllerFindOneErrors, TeamControllerFindOneResponses, TeamControllerRemoveData, TeamControllerRemoveErrors, TeamControllerRemoveResponses, UserControllerDeleteUserData, UserControllerDeleteUserErrors, UserControllerDeleteUserResponses, UserControllerFindAllUsersCursorData, UserControllerFindAllUsersCursorErrors, UserControllerFindAllUsersCursorResponses, UserControllerFindAllUsersData, UserControllerFindAllUsersErrors, UserControllerFindAllUsersResponses, UserControllerFindAllUsersWithRelationsData, UserControllerFindAllUsersWithRelationsErrors, UserControllerFindAllUsersWithRelationsResponses, UserControllerFindUserData, UserControllerFindUserErrors, UserControllerFindUserResponses, UserControllerGetCurrentUserData, UserControllerGetCurrentUserErrors, UserControllerGetCurrentUserResponses, UserControllerUpdateUserProfileData, UserControllerUpdateUserProfileErrors, UserControllerUpdateUserProfileResponses, UserTeamRoleControllerAssignData, UserTeamRoleControllerAssignResponses, UserTeamRoleControllerByTeamData, UserTeamRoleControllerByTeamResponses, UserTeamRoleControllerByUserData, UserTeamRoleControllerByUserResponses, UserTeamRoleControllerRemoveData, UserTeamRoleControllerRemoveResponses, UserTeamRoleControllerSetStatusData, UserTeamRoleControllerSetStatusResponses, UserTeamRoleControllerUpdateData, UserTeamRoleControllerUpdateResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const prometheusControllerIndex = <ThrowOnError extends boolean = false>(options?: Options<PrometheusControllerIndexData, ThrowOnError>) => {
    return (options?.client ?? client).get<PrometheusControllerIndexResponses, unknown, ThrowOnError>({
        url: '/api/metrics',
        ...options
    });
};

/**
 * Register a new user
 */
export const authControllerRegister = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRegisterData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthControllerRegisterResponses, AuthControllerRegisterErrors, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Admin: Update a user
 */
export const authControllerAdminUpdateUser = <ThrowOnError extends boolean = false>(options: Options<AuthControllerAdminUpdateUserData, ThrowOnError>) => {
    return (options.client ?? client).patch<AuthControllerAdminUpdateUserResponses, AuthControllerAdminUpdateUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Health check
 */
export const healthControllerCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthControllerCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthControllerCheckResponses, HealthControllerCheckErrors, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

/**
 * Get current user including team roles (team id/name, role id/name) and team organization (id/name)
 */
export const userControllerGetCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerGetCurrentUserResponses, UserControllerGetCurrentUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/whoami',
        ...options
    });
};

/**
 * List users.
 */
export const userControllerFindAllUsers = <ThrowOnError extends boolean = false>(options?: Options<UserControllerFindAllUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerFindAllUsersResponses, UserControllerFindAllUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/all',
        ...options
    });
};

/**
 * List users via cursor.
 */
export const userControllerFindAllUsersCursor = <ThrowOnError extends boolean = false>(options?: Options<UserControllerFindAllUsersCursorData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerFindAllUsersCursorResponses, UserControllerFindAllUsersCursorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/all/cursor',
        ...options
    });
};

/**
 * List users including userTeamRoles, team, role, and organization
 */
export const userControllerFindAllUsersWithRelations = <ThrowOnError extends boolean = false>(options?: Options<UserControllerFindAllUsersWithRelationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerFindAllUsersWithRelationsResponses, UserControllerFindAllUsersWithRelationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/all/with-relations',
        ...options
    });
};

/**
 * Delete a user
 */
export const userControllerDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UserControllerDeleteUserData, ThrowOnError>) => {
    return (options.client ?? client).delete<UserControllerDeleteUserResponses, UserControllerDeleteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{id}',
        ...options
    });
};

/**
 * Find user by id
 */
export const userControllerFindUser = <ThrowOnError extends boolean = false>(options: Options<UserControllerFindUserData, ThrowOnError>) => {
    return (options.client ?? client).get<UserControllerFindUserResponses, UserControllerFindUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{id}',
        ...options
    });
};

/**
 * Update user's profile
 */
export const userControllerUpdateUserProfile = <ThrowOnError extends boolean = false>(options: Options<UserControllerUpdateUserProfileData, ThrowOnError>) => {
    return (options.client ?? client).patch<UserControllerUpdateUserProfileResponses, UserControllerUpdateUserProfileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teams
 */
export const teamControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<TeamControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<TeamControllerFindAllResponses, TeamControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/team',
        ...options
    });
};

/**
 * Create a team
 */
export const teamControllerCreate = <ThrowOnError extends boolean = false>(options: Options<TeamControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<TeamControllerCreateResponses, TeamControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/team',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete team
 */
export const teamControllerRemove = <ThrowOnError extends boolean = false>(options: Options<TeamControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<TeamControllerRemoveResponses, TeamControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/team/{id}',
        ...options
    });
};

/**
 * Get team by id
 */
export const teamControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<TeamControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<TeamControllerFindOneResponses, TeamControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/team/{id}',
        ...options
    });
};

/**
 * List teams by organization id
 */
export const teamControllerFindByOrganization = <ThrowOnError extends boolean = false>(options: Options<TeamControllerFindByOrganizationData, ThrowOnError>) => {
    return (options.client ?? client).get<TeamControllerFindByOrganizationResponses, TeamControllerFindByOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/team/organization/{organizationId}',
        ...options
    });
};

/**
 * List invitations
 */
export const invitationControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<InvitationControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<InvitationControllerFindAllResponses, InvitationControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/invitation',
        ...options
    });
};

/**
 * Create a team invitation
 */
export const invitationControllerCreate = <ThrowOnError extends boolean = false>(options: Options<InvitationControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<InvitationControllerCreateResponses, InvitationControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/invitation',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete invitation
 */
export const invitationControllerRemove = <ThrowOnError extends boolean = false>(options: Options<InvitationControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<InvitationControllerRemoveResponses, InvitationControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/invitation/{id}',
        ...options
    });
};

/**
 * Get invitation by id
 */
export const invitationControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<InvitationControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<InvitationControllerFindOneResponses, InvitationControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/invitation/{id}',
        ...options
    });
};

export const userTeamRoleControllerAssign = <ThrowOnError extends boolean = false>(options: Options<UserTeamRoleControllerAssignData, ThrowOnError>) => {
    return (options.client ?? client).post<UserTeamRoleControllerAssignResponses, unknown, ThrowOnError>({
        url: '/api/v1/user-team-role/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userTeamRoleControllerByTeam = <ThrowOnError extends boolean = false>(options: Options<UserTeamRoleControllerByTeamData, ThrowOnError>) => {
    return (options.client ?? client).get<UserTeamRoleControllerByTeamResponses, unknown, ThrowOnError>({
        url: '/api/v1/user-team-role/by-team/{teamId}',
        ...options
    });
};

export const userTeamRoleControllerByUser = <ThrowOnError extends boolean = false>(options: Options<UserTeamRoleControllerByUserData, ThrowOnError>) => {
    return (options.client ?? client).get<UserTeamRoleControllerByUserResponses, unknown, ThrowOnError>({
        url: '/api/v1/user-team-role/by-user/{userId}',
        ...options
    });
};

export const userTeamRoleControllerRemove = <ThrowOnError extends boolean = false>(options: Options<UserTeamRoleControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<UserTeamRoleControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/v1/user-team-role/{id}',
        ...options
    });
};

export const userTeamRoleControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<UserTeamRoleControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<UserTeamRoleControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/v1/user-team-role/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userTeamRoleControllerSetStatus = <ThrowOnError extends boolean = false>(options: Options<UserTeamRoleControllerSetStatusData, ThrowOnError>) => {
    return (options.client ?? client).patch<UserTeamRoleControllerSetStatusResponses, unknown, ThrowOnError>({
        url: '/api/v1/user-team-role/{id}/status',
        ...options
    });
};

/**
 * List roles
 */
export const roleControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<RoleControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<RoleControllerFindAllResponses, RoleControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/role',
        ...options
    });
};

/**
 * Create a role
 */
export const roleControllerCreate = <ThrowOnError extends boolean = false>(options: Options<RoleControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<RoleControllerCreateResponses, RoleControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete role
 */
export const roleControllerRemove = <ThrowOnError extends boolean = false>(options: Options<RoleControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<RoleControllerRemoveResponses, RoleControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/role/{id}',
        ...options
    });
};

/**
 * Get role by id
 */
export const roleControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<RoleControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<RoleControllerFindOneResponses, RoleControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/role/{id}',
        ...options
    });
};

/**
 * Update role
 */
export const roleControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<RoleControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<RoleControllerUpdateResponses, RoleControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/role/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List roles by organization id
 */
export const roleControllerFindByOrganization = <ThrowOnError extends boolean = false>(options: Options<RoleControllerFindByOrganizationData, ThrowOnError>) => {
    return (options.client ?? client).get<RoleControllerFindByOrganizationResponses, RoleControllerFindByOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/role/organization/{organizationId}',
        ...options
    });
};

/**
 * List categories
 */
export const categoryControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CategoryControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<CategoryControllerFindAllResponses, CategoryControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/category',
        ...options
    });
};

/**
 * Create category
 */
export const categoryControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CategoryControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<CategoryControllerCreateResponses, CategoryControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/category',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all category of an organization
 */
export const categoryControllerFindAllByOrganization = <ThrowOnError extends boolean = false>(options: Options<CategoryControllerFindAllByOrganizationData, ThrowOnError>) => {
    return (options.client ?? client).get<CategoryControllerFindAllByOrganizationResponses, CategoryControllerFindAllByOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/category/organization/{id}',
        ...options
    });
};

/**
 * Delete category
 */
export const categoryControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CategoryControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<CategoryControllerRemoveResponses, CategoryControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/category/{id}',
        ...options
    });
};

/**
 * Get category by id
 */
export const categoryControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CategoryControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<CategoryControllerFindOneResponses, CategoryControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/category/{id}',
        ...options
    });
};

/**
 * Update category
 */
export const categoryControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CategoryControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<CategoryControllerUpdateResponses, CategoryControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/category/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const expenseControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ExpenseControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ExpenseControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense',
        ...options
    });
};

export const expenseControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ExpenseControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ExpenseControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const expenseControllerGetExpenseInfo = <ThrowOnError extends boolean = false>(options: Options<ExpenseControllerGetExpenseInfoData, ThrowOnError>) => {
    return (options.client ?? client).get<ExpenseControllerGetExpenseInfoResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense/expenseInfo/{userId}',
        ...options
    });
};

export const expenseControllerFindByUser = <ThrowOnError extends boolean = false>(options: Options<ExpenseControllerFindByUserData, ThrowOnError>) => {
    return (options.client ?? client).get<ExpenseControllerFindByUserResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense/user/{userId}',
        ...options
    });
};

export const expenseControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ExpenseControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<ExpenseControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense/{id}',
        ...options
    });
};

export const expenseControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ExpenseControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ExpenseControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense/{id}',
        ...options
    });
};

export const expenseControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ExpenseControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ExpenseControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const expenseControllerSubmit = <ThrowOnError extends boolean = false>(options: Options<ExpenseControllerSubmitData, ThrowOnError>) => {
    return (options.client ?? client).post<ExpenseControllerSubmitResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense/{id}/submit',
        ...options
    });
};

export const approvalWorkflowControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ApprovalWorkflowControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApprovalWorkflowControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/v1/approval-workflow',
        ...options
    });
};

export const approvalWorkflowControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ApprovalWorkflowControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ApprovalWorkflowControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/v1/approval-workflow',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const approvalWorkflowControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ApprovalWorkflowControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<ApprovalWorkflowControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/v1/approval-workflow/{id}',
        ...options
    });
};

export const approvalWorkflowControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ApprovalWorkflowControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ApprovalWorkflowControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/v1/approval-workflow/{id}',
        ...options
    });
};

export const approvalWorkflowControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ApprovalWorkflowControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ApprovalWorkflowControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/v1/approval-workflow/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new organization
 */
export const organizationControllerCreateOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerCreateOrganizationData, ThrowOnError>) => {
    return (options.client ?? client).post<OrganizationControllerCreateOrganizationResponses, OrganizationControllerCreateOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List organizations
 */
export const organizationControllerFindAllOrganizations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationControllerFindAllOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<OrganizationControllerFindAllOrganizationsResponses, OrganizationControllerFindAllOrganizationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/all',
        ...options
    });
};

/**
 * List organizations via cursor
 */
export const organizationControllerFindAllOrganizationsCursor = <ThrowOnError extends boolean = false>(options?: Options<OrganizationControllerFindAllOrganizationsCursorData, ThrowOnError>) => {
    return (options?.client ?? client).get<OrganizationControllerFindAllOrganizationsCursorResponses, OrganizationControllerFindAllOrganizationsCursorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/all/cursor',
        ...options
    });
};

/**
 * Delete an organization
 */
export const organizationControllerDeleteOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerDeleteOrganizationData, ThrowOnError>) => {
    return (options.client ?? client).delete<OrganizationControllerDeleteOrganizationResponses, OrganizationControllerDeleteOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}',
        ...options
    });
};

/**
 * Find organization by id
 */
export const organizationControllerFindOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerFindOrganizationData, ThrowOnError>) => {
    return (options.client ?? client).get<OrganizationControllerFindOrganizationResponses, OrganizationControllerFindOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}',
        ...options
    });
};

/**
 * Update organization
 */
export const organizationControllerUpdateOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerUpdateOrganizationData, ThrowOnError>) => {
    return (options.client ?? client).patch<OrganizationControllerUpdateOrganizationResponses, OrganizationControllerUpdateOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update organization active status
 */
export const organizationControllerUpdateOrganizationStatus = <ThrowOnError extends boolean = false>(options?: Options<OrganizationControllerUpdateOrganizationStatusData, ThrowOnError>) => {
    return (options?.client ?? client).patch<OrganizationControllerUpdateOrganizationStatusResponses, OrganizationControllerUpdateOrganizationStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}/status',
        ...options
    });
};

export const expensePolicyControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ExpensePolicyControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ExpensePolicyControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense-policy',
        ...options
    });
};

export const expensePolicyControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ExpensePolicyControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ExpensePolicyControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense-policy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const expensePolicyControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ExpensePolicyControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<ExpensePolicyControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense-policy/{id}',
        ...options
    });
};

export const expensePolicyControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ExpensePolicyControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ExpensePolicyControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense-policy/{id}',
        ...options
    });
};

export const expensePolicyControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ExpensePolicyControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ExpensePolicyControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/v1/expense-policy/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List activity logs
 */
export const activityLogControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ActivityLogControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ActivityLogControllerFindAllResponses, ActivityLogControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/activity-log',
        ...options
    });
};

/**
 * Create activity log
 */
export const activityLogControllerCreate = <ThrowOnError extends boolean = false>(options?: Options<ActivityLogControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActivityLogControllerCreateResponses, ActivityLogControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/activity-log',
        ...options
    });
};

/**
 * List activity logs via cursor
 */
export const activityLogControllerFindAllCursor = <ThrowOnError extends boolean = false>(options?: Options<ActivityLogControllerFindAllCursorData, ThrowOnError>) => {
    return (options?.client ?? client).get<ActivityLogControllerFindAllCursorResponses, ActivityLogControllerFindAllCursorErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/activity-log/all/cursor',
        ...options
    });
};

/**
 * Delete an activity log
 */
export const activityLogControllerDelete = <ThrowOnError extends boolean = false>(options: Options<ActivityLogControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<ActivityLogControllerDeleteResponses, ActivityLogControllerDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/activity-log/{id}',
        ...options
    });
};

/**
 * Find activity log by id
 */
export const activityLogControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ActivityLogControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ActivityLogControllerFindOneResponses, ActivityLogControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/activity-log/{id}',
        ...options
    });
};

export const approvalControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ApprovalControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApprovalControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/approval',
        ...options
    });
};

export const approvalControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ApprovalControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ApprovalControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/approval',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const approvalControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ApprovalControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<ApprovalControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/approval/{id}',
        ...options
    });
};

export const approvalControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ApprovalControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? client).get<ApprovalControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/approval/{id}',
        ...options
    });
};

export const approvalControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ApprovalControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ApprovalControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/approval/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
