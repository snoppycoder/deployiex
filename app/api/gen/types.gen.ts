// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};

export type RegisterDto = {
    /**
     * User email (unique)
     */
    email: string;
    /**
     * Account password (min 6-8 chars policy)
     */
    password: string;
    /**
     * Preferred username
     */
    username?: string;
    /**
     * First name
     */
    firstName?: string;
    /**
     * Last name
     */
    lastName?: string;
    /**
     * Initial role to assign (Admin, Owner, Staff). Defaults to Staff
     */
    role?: 'Admin' | 'Owner' | 'Staff';
};

export type ErrorDetailDto = {
    property?: string;
    code: string;
    message: string;
};

export type ErrorDto = {
    statusCode: number;
    error: string;
    message: string;
    errorCode?: string;
    details?: Array<ErrorDetailDto>;
};

export type UpdateUserAdminDto = {
    /**
     * New email (must be unique)
     */
    email?: string;
    /**
     * New username (must be unique)
     */
    username?: string;
    /**
     * First name
     */
    firstName?: string;
    /**
     * Last name
     */
    lastName?: string;
    /**
     * Set a new password for the user
     */
    password?: string;
    /**
     * Change user role (Admin, Owner, Staff). Only if no org/team links
     */
    role?: 'Admin' | 'Owner' | 'Staff';
};

export type HealthCheckDto = {
    status: {
        [key: string]: unknown;
    };
    details: {
        [key: string]: unknown;
    };
};

export type UserWithRelationsDto = {
    id: string;
    username: string;
    email: string;
    role: string;
    firstName?: string;
    lastName?: string;
    isActive: boolean;
};

export type OffsetPaginationDto = {
    limit: number;
    currentPage: number;
    nextPage: number;
    previousPage: number;
    totalRecords: number;
    totalPages: number;
};

export type OffsetPaginatedDto = {
    data: Array<Array<unknown>>;
    pagination: OffsetPaginationDto;
};

export type UserDto = {
    id: string;
    role: 'Admin' | 'Owner' | 'Staff';
    username: string;
    email: string;
    firstName?: string;
    lastName?: string;
    image?: string;
    phoneNumber?: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
};

export type OffsetPaginatedUserDto = {
    data: Array<UserDto>;
    pagination: OffsetPaginationDto;
};

export type CursorPaginationDto = {
    limit: number;
    afterCursor: string;
    beforeCursor: string;
    totalRecords: number;
};

export type CursorPaginatedDto = {
    data: Array<Array<unknown>>;
    pagination: CursorPaginationDto;
};

export type CursorPaginatedUserDto = {
    data: Array<UserDto>;
    pagination: CursorPaginationDto;
};

export type OffsetPaginatedUserWithRelationsDto = {
    data: Array<UserWithRelationsDto>;
    pagination: OffsetPaginationDto;
};

export type UpdateUserProfileDto = {
    username?: string;
    firstName?: string | null;
    lastName?: string | null;
    image?: string | null;
    phoneNumber?: string | null;
};

export type CreateTeamDto = {
    name: string;
    organizationId: string;
};

export type TeamDto = {
    id: string;
    name: string;
    organizationId: string;
    createdAt: string;
    updatedAt: string;
};

export type OffsetPaginatedTeamDto = {
    data: Array<TeamDto>;
    pagination: OffsetPaginationDto;
};

export type CreateInvitationDto = {
    teamId: string;
    email: string;
    roleId: string;
    invitedById: string;
    status: 'accepted' | 'pending' | 'declined';
};

export type InvitationDto = {
    id: string;
    teamId: string;
    email: string;
    roleId: string;
    invitedById: string;
    status: 'accepted' | 'pending' | 'declined';
    createdAt: string;
    updatedAt: string;
};

export type CreateUserTeamRoleDto = {
    userId: string;
    teamId: string;
    roleId: string;
    isPrimary?: boolean;
};

export type UpdateUserTeamRoleDto = {
    [key: string]: unknown;
};

export type CreateRoleDto = {
    name: string;
    description?: string;
    organizationId: string;
};

export type RoleDto = {
    id: string;
    name: string;
    description?: string;
    organizationId: string;
    createdAt: string;
    updatedAt: string;
};

export type OffsetPaginatedRoleDto = {
    data: Array<RoleDto>;
    pagination: OffsetPaginationDto;
};

export type UpdateRoleDto = {
    [key: string]: unknown;
};

export type CreateCategoryDto = {
    name: string;
    description?: string;
    organizationId: string;
};

export type CategoryDto = {
    id: string;
    name: string;
    description?: string;
    createdAt: string;
    updatedAt: string;
    organizationId: string;
};

export type UpdateCategoryDto = {
    [key: string]: unknown;
};

export type CreateExpenseDto = {
    userId: string;
    categoryId: string;
    organizationId: string;
    userTeamId: string | null;
    amount: number;
    currency: string;
    date: string;
    receiptUrl?: string;
    status: 'approved' | 'pending' | 'rejected' | 'submitted' | 'draft';
};

export type UpdateExpenseDto = {
    [key: string]: unknown;
};

export type CreateApprovalWorkflowDto = {
    organizationId: string;
};

export type UpdateApprovalWorkflowDto = {
    [key: string]: unknown;
};

export type CreateOrganizationDto = {
    name: string;
    ownerId: string;
    createdById: string;
    planName: string;
    industry: string;
    subscriptionStatus: 'active' | 'inactive' | 'canceled' | 'past_due';
};

export type OrganizationDto = {
    id: string;
    name: string;
    createdById: string;
    ownerId: string;
    planName: string;
    subscriptionStatus: 'active' | 'inactive' | 'canceled' | 'past_due';
    industry: string;
    isActive: boolean;
    isPersonal: boolean;
    createdAt: string;
    updatedAt: string;
};

export type OffsetPaginatedOrganizationDto = {
    data: Array<OrganizationDto>;
    pagination: OffsetPaginationDto;
};

export type CursorPaginatedOrganizationDto = {
    data: Array<OrganizationDto>;
    pagination: CursorPaginationDto;
};

export type UpdateOrganizationDto = {
    name?: string;
    ownerId?: string;
    createdById?: string;
    planName?: string;
    industry?: string;
    subscriptionStatus?: 'active' | 'inactive' | 'canceled' | 'past_due';
};

export type CreateExpensePolicyDto = {
    organizationId: string;
    workflowId: string | null;
    policyName: string;
    description?: string;
    maxAmount?: number;
    requiresReceipt?: boolean;
    autoApprove?: boolean;
};

export type UpdateExpensePolicyDto = {
    [key: string]: unknown;
};

export type ActivityLogDto = {
    id: string;
    userId: string;
    userTeamId: string | null;
    organizationId: string | null;
    actionType: string;
    actionDescription: string | null;
    timestamp: string;
    createdAt: string;
    updatedAt: string;
};

export type OffsetPaginatedActivityLogDto = {
    data: Array<ActivityLogDto>;
    pagination: OffsetPaginationDto;
};

export type CursorPaginatedActivityLogDto = {
    data: Array<ActivityLogDto>;
    pagination: CursorPaginationDto;
};

export type CreateApprovalDto = {
    [key: string]: unknown;
};

export type UpdateApprovalDto = {
    [key: string]: unknown;
};

export type PrometheusControllerIndexData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/metrics';
};

export type PrometheusControllerIndexResponses = {
    200: unknown;
};

export type AuthControllerRegisterData = {
    body: RegisterDto;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type AuthControllerRegisterErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type AuthControllerRegisterError = AuthControllerRegisterErrors[keyof AuthControllerRegisterErrors];

export type AuthControllerRegisterResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AuthControllerAdminUpdateUserData = {
    body: UpdateUserAdminDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/auth/users/{id}';
};

export type AuthControllerAdminUpdateUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type AuthControllerAdminUpdateUserError = AuthControllerAdminUpdateUserErrors[keyof AuthControllerAdminUpdateUserErrors];

export type AuthControllerAdminUpdateUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type HealthControllerCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health';
};

export type HealthControllerCheckErrors = {
    404: ErrorDto;
    /**
     * The Health Check is not successful
     */
    503: {
        status?: string;
        info?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        } | null;
        error?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        } | null;
        details?: {
            [key: string]: {
                status: string;
                [key: string]: unknown | string;
            };
        };
    };
};

export type HealthControllerCheckError = HealthControllerCheckErrors[keyof HealthControllerCheckErrors];

export type HealthControllerCheckResponses = {
    200: HealthCheckDto;
};

export type HealthControllerCheckResponse = HealthControllerCheckResponses[keyof HealthControllerCheckResponses];

export type UserControllerGetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/whoami';
};

export type UserControllerGetCurrentUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type UserControllerGetCurrentUserError = UserControllerGetCurrentUserErrors[keyof UserControllerGetCurrentUserErrors];

export type UserControllerGetCurrentUserResponses = {
    /**
     * OK
     */
    200: UserWithRelationsDto;
};

export type UserControllerGetCurrentUserResponse = UserControllerGetCurrentUserResponses[keyof UserControllerGetCurrentUserResponses];

export type UserControllerFindAllUsersData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        page?: number;
        q?: string;
        order?: 'asc' | 'desc';
        /**
         * Filter by organization id
         */
        organizationId?: string;
        /**
         * Filter by team id
         */
        teamId?: string;
        /**
         * Filter by user role
         */
        role?: 'Admin' | 'Owner' | 'Staff';
        /**
         * Filter by team role id
         */
        teamRoleId?: string;
        /**
         * Filter by active status
         */
        status?: boolean;
    };
    url: '/api/v1/user/all';
};

export type UserControllerFindAllUsersErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type UserControllerFindAllUsersError = UserControllerFindAllUsersErrors[keyof UserControllerFindAllUsersErrors];

export type UserControllerFindAllUsersResponses = {
    /**
     * PaginatedResponseOfOffsetPaginatedUserDto
     * OK
     */
    200: OffsetPaginatedDto & {
        data?: Array<OffsetPaginatedUserDto>;
    };
};

export type UserControllerFindAllUsersResponse = UserControllerFindAllUsersResponses[keyof UserControllerFindAllUsersResponses];

export type UserControllerFindAllUsersCursorData = {
    body?: never;
    path?: never;
    query?: {
        afterCursor?: string;
        beforeCursor?: string;
        limit?: number;
        q?: string;
    };
    url: '/api/v1/user/all/cursor';
};

export type UserControllerFindAllUsersCursorErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type UserControllerFindAllUsersCursorError = UserControllerFindAllUsersCursorErrors[keyof UserControllerFindAllUsersCursorErrors];

export type UserControllerFindAllUsersCursorResponses = {
    /**
     * PaginatedResponseOfCursorPaginatedUserDto
     * OK
     */
    200: CursorPaginatedDto & {
        data?: Array<CursorPaginatedUserDto>;
    };
};

export type UserControllerFindAllUsersCursorResponse = UserControllerFindAllUsersCursorResponses[keyof UserControllerFindAllUsersCursorResponses];

export type UserControllerFindAllUsersWithRelationsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        page?: number;
        q?: string;
        order?: 'asc' | 'desc';
        /**
         * Filter by organization id
         */
        organizationId?: string;
        /**
         * Filter by team id
         */
        teamId?: string;
        /**
         * Filter by user role
         */
        role?: 'Admin' | 'Owner' | 'Staff';
        /**
         * Filter by team role id
         */
        teamRoleId?: string;
        /**
         * Filter by active status
         */
        status?: boolean;
    };
    url: '/api/v1/user/all/with-relations';
};

export type UserControllerFindAllUsersWithRelationsErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type UserControllerFindAllUsersWithRelationsError = UserControllerFindAllUsersWithRelationsErrors[keyof UserControllerFindAllUsersWithRelationsErrors];

export type UserControllerFindAllUsersWithRelationsResponses = {
    /**
     * PaginatedResponseOfOffsetPaginatedUserWithRelationsDto
     * OK
     */
    200: OffsetPaginatedDto & {
        data?: Array<OffsetPaginatedUserWithRelationsDto>;
    };
};

export type UserControllerFindAllUsersWithRelationsResponse = UserControllerFindAllUsersWithRelationsResponses[keyof UserControllerFindAllUsersWithRelationsResponses];

export type UserControllerDeleteUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user/{id}';
};

export type UserControllerDeleteUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type UserControllerDeleteUserError = UserControllerDeleteUserErrors[keyof UserControllerDeleteUserErrors];

export type UserControllerDeleteUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UserControllerFindUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user/{id}';
};

export type UserControllerFindUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type UserControllerFindUserError = UserControllerFindUserErrors[keyof UserControllerFindUserErrors];

export type UserControllerFindUserResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type UserControllerFindUserResponse = UserControllerFindUserResponses[keyof UserControllerFindUserResponses];

export type UserControllerUpdateUserProfileData = {
    body: UpdateUserProfileDto;
    path?: never;
    query?: never;
    url: '/api/v1/user/profile';
};

export type UserControllerUpdateUserProfileErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type UserControllerUpdateUserProfileError = UserControllerUpdateUserProfileErrors[keyof UserControllerUpdateUserProfileErrors];

export type UserControllerUpdateUserProfileResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type UserControllerUpdateUserProfileResponse = UserControllerUpdateUserProfileResponses[keyof UserControllerUpdateUserProfileResponses];

export type TeamControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/team';
};

export type TeamControllerFindAllErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type TeamControllerFindAllError = TeamControllerFindAllErrors[keyof TeamControllerFindAllErrors];

export type TeamControllerFindAllResponses = {
    /**
     * OK
     */
    200: TeamDto;
};

export type TeamControllerFindAllResponse = TeamControllerFindAllResponses[keyof TeamControllerFindAllResponses];

export type TeamControllerCreateData = {
    body: CreateTeamDto;
    path?: never;
    query?: never;
    url: '/api/v1/team';
};

export type TeamControllerCreateErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type TeamControllerCreateError = TeamControllerCreateErrors[keyof TeamControllerCreateErrors];

export type TeamControllerCreateResponses = {
    /**
     * OK
     */
    200: TeamDto;
};

export type TeamControllerCreateResponse = TeamControllerCreateResponses[keyof TeamControllerCreateResponses];

export type TeamControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/team/{id}';
};

export type TeamControllerRemoveErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type TeamControllerRemoveError = TeamControllerRemoveErrors[keyof TeamControllerRemoveErrors];

export type TeamControllerRemoveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TeamControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/team/{id}';
};

export type TeamControllerFindOneErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type TeamControllerFindOneError = TeamControllerFindOneErrors[keyof TeamControllerFindOneErrors];

export type TeamControllerFindOneResponses = {
    /**
     * OK
     */
    200: TeamDto;
};

export type TeamControllerFindOneResponse = TeamControllerFindOneResponses[keyof TeamControllerFindOneResponses];

export type TeamControllerFindByOrganizationData = {
    body?: never;
    path: {
        organizationId: string;
    };
    query?: {
        limit?: number;
        page?: number;
        q?: string;
        order?: 'asc' | 'desc';
    };
    url: '/api/v1/team/organization/{organizationId}';
};

export type TeamControllerFindByOrganizationErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type TeamControllerFindByOrganizationError = TeamControllerFindByOrganizationErrors[keyof TeamControllerFindByOrganizationErrors];

export type TeamControllerFindByOrganizationResponses = {
    /**
     * PaginatedResponseOfOffsetPaginatedTeamDto
     * OK
     */
    200: OffsetPaginatedDto & {
        data?: Array<OffsetPaginatedTeamDto>;
    };
};

export type TeamControllerFindByOrganizationResponse = TeamControllerFindByOrganizationResponses[keyof TeamControllerFindByOrganizationResponses];

export type InvitationControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/invitation';
};

export type InvitationControllerFindAllErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type InvitationControllerFindAllError = InvitationControllerFindAllErrors[keyof InvitationControllerFindAllErrors];

export type InvitationControllerFindAllResponses = {
    /**
     * OK
     */
    200: InvitationDto;
};

export type InvitationControllerFindAllResponse = InvitationControllerFindAllResponses[keyof InvitationControllerFindAllResponses];

export type InvitationControllerCreateData = {
    body: CreateInvitationDto;
    path?: never;
    query?: never;
    url: '/api/v1/invitation';
};

export type InvitationControllerCreateErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type InvitationControllerCreateError = InvitationControllerCreateErrors[keyof InvitationControllerCreateErrors];

export type InvitationControllerCreateResponses = {
    /**
     * OK
     */
    200: InvitationDto;
};

export type InvitationControllerCreateResponse = InvitationControllerCreateResponses[keyof InvitationControllerCreateResponses];

export type InvitationControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/invitation/{id}';
};

export type InvitationControllerRemoveErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type InvitationControllerRemoveError = InvitationControllerRemoveErrors[keyof InvitationControllerRemoveErrors];

export type InvitationControllerRemoveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type InvitationControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/invitation/{id}';
};

export type InvitationControllerFindOneErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type InvitationControllerFindOneError = InvitationControllerFindOneErrors[keyof InvitationControllerFindOneErrors];

export type InvitationControllerFindOneResponses = {
    /**
     * OK
     */
    200: InvitationDto;
};

export type InvitationControllerFindOneResponse = InvitationControllerFindOneResponses[keyof InvitationControllerFindOneResponses];

export type UserTeamRoleControllerAssignData = {
    body: CreateUserTeamRoleDto;
    path?: never;
    query?: never;
    url: '/api/v1/user-team-role/assign';
};

export type UserTeamRoleControllerAssignResponses = {
    201: unknown;
};

export type UserTeamRoleControllerByTeamData = {
    body?: never;
    path: {
        teamId: string;
    };
    query?: never;
    url: '/api/v1/user-team-role/by-team/{teamId}';
};

export type UserTeamRoleControllerByTeamResponses = {
    200: unknown;
};

export type UserTeamRoleControllerByUserData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/v1/user-team-role/by-user/{userId}';
};

export type UserTeamRoleControllerByUserResponses = {
    200: unknown;
};

export type UserTeamRoleControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user-team-role/{id}';
};

export type UserTeamRoleControllerRemoveResponses = {
    200: unknown;
};

export type UserTeamRoleControllerUpdateData = {
    body: UpdateUserTeamRoleDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user-team-role/{id}';
};

export type UserTeamRoleControllerUpdateResponses = {
    200: unknown;
};

export type UserTeamRoleControllerSetStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user-team-role/{id}/status';
};

export type UserTeamRoleControllerSetStatusResponses = {
    200: unknown;
};

export type RoleControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/role';
};

export type RoleControllerFindAllErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type RoleControllerFindAllError = RoleControllerFindAllErrors[keyof RoleControllerFindAllErrors];

export type RoleControllerFindAllResponses = {
    /**
     * OK
     */
    200: RoleDto;
};

export type RoleControllerFindAllResponse = RoleControllerFindAllResponses[keyof RoleControllerFindAllResponses];

export type RoleControllerCreateData = {
    body: CreateRoleDto;
    path?: never;
    query?: never;
    url: '/api/v1/role';
};

export type RoleControllerCreateErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type RoleControllerCreateError = RoleControllerCreateErrors[keyof RoleControllerCreateErrors];

export type RoleControllerCreateResponses = {
    /**
     * OK
     */
    200: RoleDto;
};

export type RoleControllerCreateResponse = RoleControllerCreateResponses[keyof RoleControllerCreateResponses];

export type RoleControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/role/{id}';
};

export type RoleControllerRemoveErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type RoleControllerRemoveError = RoleControllerRemoveErrors[keyof RoleControllerRemoveErrors];

export type RoleControllerRemoveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RoleControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/role/{id}';
};

export type RoleControllerFindOneErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type RoleControllerFindOneError = RoleControllerFindOneErrors[keyof RoleControllerFindOneErrors];

export type RoleControllerFindOneResponses = {
    /**
     * OK
     */
    200: RoleDto;
};

export type RoleControllerFindOneResponse = RoleControllerFindOneResponses[keyof RoleControllerFindOneResponses];

export type RoleControllerUpdateData = {
    body: UpdateRoleDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/role/{id}';
};

export type RoleControllerUpdateErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type RoleControllerUpdateError = RoleControllerUpdateErrors[keyof RoleControllerUpdateErrors];

export type RoleControllerUpdateResponses = {
    /**
     * OK
     */
    200: RoleDto;
};

export type RoleControllerUpdateResponse = RoleControllerUpdateResponses[keyof RoleControllerUpdateResponses];

export type RoleControllerFindByOrganizationData = {
    body?: never;
    path: {
        organizationId: string;
    };
    query?: {
        limit?: number;
        page?: number;
        q?: string;
        order?: 'asc' | 'desc';
    };
    url: '/api/v1/role/organization/{organizationId}';
};

export type RoleControllerFindByOrganizationErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type RoleControllerFindByOrganizationError = RoleControllerFindByOrganizationErrors[keyof RoleControllerFindByOrganizationErrors];

export type RoleControllerFindByOrganizationResponses = {
    /**
     * PaginatedResponseOfOffsetPaginatedRoleDto
     * OK
     */
    200: OffsetPaginatedDto & {
        data?: Array<OffsetPaginatedRoleDto>;
    };
};

export type RoleControllerFindByOrganizationResponse = RoleControllerFindByOrganizationResponses[keyof RoleControllerFindByOrganizationResponses];

export type CategoryControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/category';
};

export type CategoryControllerFindAllErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type CategoryControllerFindAllError = CategoryControllerFindAllErrors[keyof CategoryControllerFindAllErrors];

export type CategoryControllerFindAllResponses = {
    /**
     * OK
     */
    200: CategoryDto;
};

export type CategoryControllerFindAllResponse = CategoryControllerFindAllResponses[keyof CategoryControllerFindAllResponses];

export type CategoryControllerCreateData = {
    body: CreateCategoryDto;
    path?: never;
    query?: never;
    url: '/api/v1/category';
};

export type CategoryControllerCreateErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type CategoryControllerCreateError = CategoryControllerCreateErrors[keyof CategoryControllerCreateErrors];

export type CategoryControllerCreateResponses = {
    /**
     * OK
     */
    200: CategoryDto;
};

export type CategoryControllerCreateResponse = CategoryControllerCreateResponses[keyof CategoryControllerCreateResponses];

export type CategoryControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/category/{id}';
};

export type CategoryControllerRemoveErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type CategoryControllerRemoveError = CategoryControllerRemoveErrors[keyof CategoryControllerRemoveErrors];

export type CategoryControllerRemoveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type CategoryControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/category/{id}';
};

export type CategoryControllerFindOneErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type CategoryControllerFindOneError = CategoryControllerFindOneErrors[keyof CategoryControllerFindOneErrors];

export type CategoryControllerFindOneResponses = {
    /**
     * OK
     */
    200: CategoryDto;
};

export type CategoryControllerFindOneResponse = CategoryControllerFindOneResponses[keyof CategoryControllerFindOneResponses];

export type CategoryControllerUpdateData = {
    body: UpdateCategoryDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/category/{id}';
};

export type CategoryControllerUpdateErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type CategoryControllerUpdateError = CategoryControllerUpdateErrors[keyof CategoryControllerUpdateErrors];

export type CategoryControllerUpdateResponses = {
    /**
     * OK
     */
    200: CategoryDto;
};

export type CategoryControllerUpdateResponse = CategoryControllerUpdateResponses[keyof CategoryControllerUpdateResponses];

export type ExpenseControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/expense';
};

export type ExpenseControllerFindAllResponses = {
    200: unknown;
};

export type ExpenseControllerCreateData = {
    body: CreateExpenseDto;
    path?: never;
    query?: never;
    url: '/api/v1/expense';
};

export type ExpenseControllerCreateResponses = {
    201: unknown;
};

export type ExpenseControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/expense/{id}';
};

export type ExpenseControllerRemoveResponses = {
    200: unknown;
};

export type ExpenseControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/expense/{id}';
};

export type ExpenseControllerFindOneResponses = {
    200: unknown;
};

export type ExpenseControllerUpdateData = {
    body: UpdateExpenseDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/expense/{id}';
};

export type ExpenseControllerUpdateResponses = {
    200: unknown;
};

export type ExpenseControllerSubmitData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/expense/{id}/submit';
};

export type ExpenseControllerSubmitResponses = {
    201: unknown;
};

export type ApprovalWorkflowControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/approval-workflow';
};

export type ApprovalWorkflowControllerFindAllResponses = {
    200: unknown;
};

export type ApprovalWorkflowControllerCreateData = {
    body: CreateApprovalWorkflowDto;
    path?: never;
    query?: never;
    url: '/api/v1/approval-workflow';
};

export type ApprovalWorkflowControllerCreateResponses = {
    201: unknown;
};

export type ApprovalWorkflowControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/approval-workflow/{id}';
};

export type ApprovalWorkflowControllerRemoveResponses = {
    200: unknown;
};

export type ApprovalWorkflowControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/approval-workflow/{id}';
};

export type ApprovalWorkflowControllerFindOneResponses = {
    200: unknown;
};

export type ApprovalWorkflowControllerUpdateData = {
    body: UpdateApprovalWorkflowDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/approval-workflow/{id}';
};

export type ApprovalWorkflowControllerUpdateResponses = {
    200: unknown;
};

export type OrganizationControllerCreateOrganizationData = {
    body: CreateOrganizationDto;
    path?: never;
    query?: never;
    url: '/api/v1/organization';
};

export type OrganizationControllerCreateOrganizationErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type OrganizationControllerCreateOrganizationError = OrganizationControllerCreateOrganizationErrors[keyof OrganizationControllerCreateOrganizationErrors];

export type OrganizationControllerCreateOrganizationResponses = {
    /**
     * OK
     */
    200: OrganizationDto;
};

export type OrganizationControllerCreateOrganizationResponse = OrganizationControllerCreateOrganizationResponses[keyof OrganizationControllerCreateOrganizationResponses];

export type OrganizationControllerFindAllOrganizationsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        page?: number;
        q?: string;
        order?: 'asc' | 'desc';
    };
    url: '/api/v1/organization/all';
};

export type OrganizationControllerFindAllOrganizationsErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type OrganizationControllerFindAllOrganizationsError = OrganizationControllerFindAllOrganizationsErrors[keyof OrganizationControllerFindAllOrganizationsErrors];

export type OrganizationControllerFindAllOrganizationsResponses = {
    /**
     * PaginatedResponseOfOffsetPaginatedOrganizationDto
     * OK
     */
    200: OffsetPaginatedDto & {
        data?: Array<OffsetPaginatedOrganizationDto>;
    };
};

export type OrganizationControllerFindAllOrganizationsResponse = OrganizationControllerFindAllOrganizationsResponses[keyof OrganizationControllerFindAllOrganizationsResponses];

export type OrganizationControllerFindAllOrganizationsCursorData = {
    body?: never;
    path?: never;
    query?: {
        afterCursor?: string;
        beforeCursor?: string;
        limit?: number;
        q?: string;
    };
    url: '/api/v1/organization/all/cursor';
};

export type OrganizationControllerFindAllOrganizationsCursorErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type OrganizationControllerFindAllOrganizationsCursorError = OrganizationControllerFindAllOrganizationsCursorErrors[keyof OrganizationControllerFindAllOrganizationsCursorErrors];

export type OrganizationControllerFindAllOrganizationsCursorResponses = {
    /**
     * PaginatedResponseOfCursorPaginatedOrganizationDto
     * OK
     */
    200: CursorPaginatedDto & {
        data?: Array<CursorPaginatedOrganizationDto>;
    };
};

export type OrganizationControllerFindAllOrganizationsCursorResponse = OrganizationControllerFindAllOrganizationsCursorResponses[keyof OrganizationControllerFindAllOrganizationsCursorResponses];

export type OrganizationControllerDeleteOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organization/{id}';
};

export type OrganizationControllerDeleteOrganizationErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type OrganizationControllerDeleteOrganizationError = OrganizationControllerDeleteOrganizationErrors[keyof OrganizationControllerDeleteOrganizationErrors];

export type OrganizationControllerDeleteOrganizationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type OrganizationControllerFindOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organization/{id}';
};

export type OrganizationControllerFindOrganizationErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type OrganizationControllerFindOrganizationError = OrganizationControllerFindOrganizationErrors[keyof OrganizationControllerFindOrganizationErrors];

export type OrganizationControllerFindOrganizationResponses = {
    /**
     * OK
     */
    200: OrganizationDto;
};

export type OrganizationControllerFindOrganizationResponse = OrganizationControllerFindOrganizationResponses[keyof OrganizationControllerFindOrganizationResponses];

export type OrganizationControllerUpdateOrganizationData = {
    body: UpdateOrganizationDto;
    path?: never;
    query?: never;
    url: '/api/v1/organization/{id}';
};

export type OrganizationControllerUpdateOrganizationErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type OrganizationControllerUpdateOrganizationError = OrganizationControllerUpdateOrganizationErrors[keyof OrganizationControllerUpdateOrganizationErrors];

export type OrganizationControllerUpdateOrganizationResponses = {
    /**
     * OK
     */
    200: OrganizationDto;
};

export type OrganizationControllerUpdateOrganizationResponse = OrganizationControllerUpdateOrganizationResponses[keyof OrganizationControllerUpdateOrganizationResponses];

export type OrganizationControllerUpdateOrganizationStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/organization/{id}/status';
};

export type OrganizationControllerUpdateOrganizationStatusErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type OrganizationControllerUpdateOrganizationStatusError = OrganizationControllerUpdateOrganizationStatusErrors[keyof OrganizationControllerUpdateOrganizationStatusErrors];

export type OrganizationControllerUpdateOrganizationStatusResponses = {
    /**
     * OK
     */
    200: OrganizationDto;
};

export type OrganizationControllerUpdateOrganizationStatusResponse = OrganizationControllerUpdateOrganizationStatusResponses[keyof OrganizationControllerUpdateOrganizationStatusResponses];

export type ExpensePolicyControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/expense-policy';
};

export type ExpensePolicyControllerFindAllResponses = {
    200: unknown;
};

export type ExpensePolicyControllerCreateData = {
    body: CreateExpensePolicyDto;
    path?: never;
    query?: never;
    url: '/api/v1/expense-policy';
};

export type ExpensePolicyControllerCreateResponses = {
    201: unknown;
};

export type ExpensePolicyControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/expense-policy/{id}';
};

export type ExpensePolicyControllerRemoveResponses = {
    200: unknown;
};

export type ExpensePolicyControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/expense-policy/{id}';
};

export type ExpensePolicyControllerFindOneResponses = {
    200: unknown;
};

export type ExpensePolicyControllerUpdateData = {
    body: UpdateExpensePolicyDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/expense-policy/{id}';
};

export type ExpensePolicyControllerUpdateResponses = {
    200: unknown;
};

export type ActivityLogControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        page?: number;
        q?: string;
        order?: 'asc' | 'desc';
    };
    url: '/api/v1/activity-log';
};

export type ActivityLogControllerFindAllErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type ActivityLogControllerFindAllError = ActivityLogControllerFindAllErrors[keyof ActivityLogControllerFindAllErrors];

export type ActivityLogControllerFindAllResponses = {
    /**
     * PaginatedResponseOfOffsetPaginatedActivityLogDto
     * OK
     */
    200: OffsetPaginatedDto & {
        data?: Array<OffsetPaginatedActivityLogDto>;
    };
};

export type ActivityLogControllerFindAllResponse = ActivityLogControllerFindAllResponses[keyof ActivityLogControllerFindAllResponses];

export type ActivityLogControllerCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/activity-log';
};

export type ActivityLogControllerCreateErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type ActivityLogControllerCreateError = ActivityLogControllerCreateErrors[keyof ActivityLogControllerCreateErrors];

export type ActivityLogControllerCreateResponses = {
    /**
     * OK
     */
    200: ActivityLogDto;
};

export type ActivityLogControllerCreateResponse = ActivityLogControllerCreateResponses[keyof ActivityLogControllerCreateResponses];

export type ActivityLogControllerFindAllCursorData = {
    body?: never;
    path?: never;
    query?: {
        afterCursor?: string;
        beforeCursor?: string;
        limit?: number;
        q?: string;
    };
    url: '/api/v1/activity-log/all/cursor';
};

export type ActivityLogControllerFindAllCursorErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type ActivityLogControllerFindAllCursorError = ActivityLogControllerFindAllCursorErrors[keyof ActivityLogControllerFindAllCursorErrors];

export type ActivityLogControllerFindAllCursorResponses = {
    /**
     * PaginatedResponseOfCursorPaginatedActivityLogDto
     * OK
     */
    200: OffsetPaginatedDto & {
        data?: Array<CursorPaginatedActivityLogDto>;
    };
};

export type ActivityLogControllerFindAllCursorResponse = ActivityLogControllerFindAllCursorResponses[keyof ActivityLogControllerFindAllCursorResponses];

export type ActivityLogControllerDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/activity-log/{id}';
};

export type ActivityLogControllerDeleteErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type ActivityLogControllerDeleteError = ActivityLogControllerDeleteErrors[keyof ActivityLogControllerDeleteErrors];

export type ActivityLogControllerDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ActivityLogControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/activity-log/{id}';
};

export type ActivityLogControllerFindOneErrors = {
    /**
     * Bad Request
     */
    400: ErrorDto;
    /**
     * Unauthorized
     */
    401: ErrorDto;
    /**
     * Forbidden
     */
    403: ErrorDto;
    /**
     * Not Found
     */
    404: ErrorDto;
    /**
     * Unprocessable Entity
     */
    422: ErrorDto;
    /**
     * Internal Server Error
     */
    500: ErrorDto;
};

export type ActivityLogControllerFindOneError = ActivityLogControllerFindOneErrors[keyof ActivityLogControllerFindOneErrors];

export type ActivityLogControllerFindOneResponses = {
    /**
     * OK
     */
    200: ActivityLogDto;
};

export type ActivityLogControllerFindOneResponse = ActivityLogControllerFindOneResponses[keyof ActivityLogControllerFindOneResponses];

export type ApprovalControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/approval';
};

export type ApprovalControllerFindAllResponses = {
    200: unknown;
};

export type ApprovalControllerCreateData = {
    body: CreateApprovalDto;
    path?: never;
    query?: never;
    url: '/api/approval';
};

export type ApprovalControllerCreateResponses = {
    201: unknown;
};

export type ApprovalControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/approval/{id}';
};

export type ApprovalControllerRemoveResponses = {
    200: unknown;
};

export type ApprovalControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/approval/{id}';
};

export type ApprovalControllerFindOneResponses = {
    200: unknown;
};

export type ApprovalControllerUpdateData = {
    body: UpdateApprovalDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/approval/{id}';
};

export type ApprovalControllerUpdateResponses = {
    200: unknown;
};
